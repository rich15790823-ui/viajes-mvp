const vuelosRoute = require('./routes/vuelos');
// CARGA VARIABLES .env (debe ir primero, con ruta explícita)
require('dotenv').config({ path: require('path').join(__dirname, '.env') });

const express = require('express');
const cors = require('cors');
const Amadeus = require('amadeus');
const vuelosRoute = require('./routes/vuelos');

const app = express();

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public')); // servirá /public/index.html

// Lee variables y hace trims por si hay espacios
const AMADEUS_ID = (process.env.AMADEUS_CLIENT_ID || '').trim();
const AMADEUS_SECRET = (process.env.AMADEUS_CLIENT_SECRET || '').trim();

// Debug útil
console.log('DEBUG ID len:', AMADEUS_ID.length);
console.log('DEBUG SECRET len:', AMADEUS_SECRET.length);

// Corta si faltan variables
if (!AMADEUS_ID || !AMADEUS_SECRET) {
  console.error('❌ No se leyeron AMADEUS_CLIENT_ID / AMADEUS_CLIENT_SECRET desde .env');
  process.exit(1);
}

// Instancia Amadeus en TEST
const amadeus = new Amadeus({
  clientId: AMADEUS_ID,
  clientSecret: AMADEUS_SECRET,
  hostname: 'test' // MUY IMPORTANTE: usar entorno de pruebas
});

// Ruta API: /api/vuelos?origin=MAD&destination=JFK&date=2025-09-01&adults=1
app.get('/api/vuelos', async (req, res) => {
  try {
    const origin = (req.query.origin || '').toUpperCase().trim();
const destination = (req.query.destination || '').toUpperCase().trim();
const date = (req.query.date || '').trim();
const adults = Number(req.query.adults || 1);
const currency = (req.query.currency || 'USD').toUpperCase().trim();

    // Validaciones rápidas
    if (!/^[A-Z]{3}$/.test(origin)) {
      return res.status(400).json({ error: 'Parámetro "origin" inválido. Usa código IATA de 3 letras (ej. MAD).' });
    }
    if (!/^[A-Z]{3}$/.test(destination)) {
      return res.status(400).json({ error: 'Parámetro "destination" inválido. Usa código IATA de 3 letras (ej. JFK).' });
    }
    if (!/^\d{4}-\d{2}-\d{2}$/.test(date)) {
      return res.status(400).json({ error: 'Parámetro "date" inválido. Usa formato YYYY-MM-DD (ej. 2025-09-01).' });
    }
    if (!Number.isInteger(adults) || adults < 1) {
      return res.status(400).json({ error: 'Parámetro "adults" inválido. Debe ser entero >= 1.' });
    }

    // Llamada a Amadeus
    const response = await amadeus.shopping.flightOffersSearch.get({
      originLocationCode: origin,
      destinationLocationCode: destination,
      departureDate: date,
      adults: adults,
      currencyCode: currency,
      max: 10
    });

    // Diccionarios de aerolíneas
    const dict = response.result?.dictionaries || {};
    const carriers = dict.carriers || {};

    // Simplificar resultados
    const data = (response.data || []).map((offer) => {
      const priceTotal = offer.price?.total || null;
      const itin = offer.itineraries?.[0];
      const segments = itin?.segments || [];
      const first = segments[0];
      const last = segments[segments.length - 1];

      const airlineCode = first?.carrierCode || '';
      const airlineName = carriers[airlineCode] || airlineCode;

      return {
        priceTotal,
        currency: offer.price?.currency || 'USD',
        airline: airlineName,
        airlineCode,
        departureAt: first?.departure?.at || null,
        departureIata: first?.departure?.iataCode || null,
        arrivalAt: last?.arrival?.at || null,
        arrivalIata: last?.arrival?.iataCode || null,
        duration: itin?.duration || null,
        stops: Math.max(0, segments.length - 1)
      };
    });

    res.json({ results: data });
  } catch (err) {
    console.error('Error en /api/vuelos:', err?.response?.result || err.message || err);
    const status = err?.response?.statusCode || 500;
    const body = err?.response?.result || { error: 'Error inesperado' };
    res.status(status).json(body);
  }
});

// Levantar servidor
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`✅ Servidor corriendo en http://localhost:${PORT}`);
});
